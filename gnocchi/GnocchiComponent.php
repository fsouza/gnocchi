<?php

/**
 * GnocchiComponent is a class that represents a component managed by Gnocchi container.
 *
 * The constructor receives a class name which is the name of the class that will be managed by Gnocchi
 * as a component.
 *
 * Example:
 *
 *      class Person {
 *          
 *          private $name;
 *
 *          function __construct($name) {
 *              $this->name = $name;
 *          }
 *
 *      }
 *
 *      $component = new GnocchiComponent("Person");
 *      $component->getClassName(); // will result "Person"
 *
 * @author Francisco Souza
 */
class GnocchiComponent {

    private $reflected, $constructorParameters, $constructorValues;

    /**
     * The constructor receives a class name and reflects that class.
     *
     * @param $className
     *              Represents the name of the class that will be managed by Gnocchi
     * @throws ReflectionException if the className does not exists.
     */
    public function __construct($className) {
        $this->reflected = new ReflectionClass($className);
        $constructor = $this->reflected->getConstructor();
        $this->constructorParameters = $constructor->getParameters();
    }

    /**
     * @return the name of the reflected class
     */
    public function getClassName() {
        return $this->reflected->getName();
    }

    /**
     * @return the reflected class (instance of ReflectionClass)
     */
    public function getReflectedClass() {
        return $this->reflected;
    }

    /**
     * @return an array containing all parameters of the constructor
     */
    public function getConstructorParameters() {
        return $this->constructorParameters;
    }

    /**
     * Set a value to a constructor parameter.
     *
     * This value will be setted in all instances generated by GnocchiContainer
     *
     * @param $parameterName:
     *              The name of the parameter that will be setted.
     *
     * @param $parameterValue:
     *              The value for the parameter.
     */
    public function setConstructorParameterValue($parameterName, $parameterValue) {
        $this->constructorValues[$parameterName] = $parameterValue;
    }

    /**
     * This method returns all parameters of the constructor 
     *
     * @return an array containing all constructor parameters with its values ready to the class instantiation
     * @throws ReflectionException if there is not a value for the parameter and the parameter also has no default value
     */
    public function getConstructorParametersWithValues() {
        $returnArray = array();
        foreach ($this->constructorParameters as $parameter) {
            if (array_key_exists($parameter->name, $this->constructorValues)) {
                $value = $this->constructorValues[$parameter->name];
            } else {
                $value = $parameter->getDefaultValue();
            }
            $returnArray[$parameter->name] = $value;
        }
        return $returnArray;
    }

}
